-- Procedures -----------------------------------------------------------------
--schema level - create procedure or create function/ drop it
--inside pkg - delete only when pkg is deleted "drop pkg "
--inside pl sql bkl invoked with a set of parameters - functions - ret 1 val,
  --  procedures - dont return value, perform action
  
--The AS keyword is used instead of the IS keyword for creating a standalone procedure

CREATE OR REPLACE PROCEDURE greetings
AS
BEGIN dbms_output.put_line('Hello World!');
END;

--execute standalone proc
execute greetings;
--or inside pl/sql
BEGIN greetings; 
END;

--delete standalone proc
BEGIN 
DROP PROCEDURE greetings; 
END;
--DOESNT WORK as to EXECUTE DELETE U HAVE TO USE EXECUTE IMMEDIATE

--**************************************
BEGIN 
EXECUTE IMMEDIATE
'DROP PROCEDURE greetings';
END;
--**************************************

--IN passed by reference as const, OUT and IN OUT passed by value and can change

--Find min of 2 numbers
DECLARE 
a number;
b number;
c number;

PROCEDURE findMin(x IN number, y IN number, z OUT number) IS
BEGIN 
  IF x < y THEN
    z:= x; 
  ELSE z:= y;
  END IF; 
END;

BEGIN 
  a:= 23;
  b:= 45;
  findMin(a, b, c);
  dbms_output.put_line(' Minimum of (23, 45) : ' || c); 
END;


--compute square of value passed by value
DECLARE 
a number;
PROCEDURE squareNum(x IN OUT number) IS 
BEGIN 
  x := x * x; 
END; 
BEGIN 
  a:= 23;
  squareNum(a);
  dbms_output.put_line(' Square of (23): ' || a);
END;


--PASS parameters
--positional notation, named notation, mixed notation

--positional - findMin(a,b,c,d);
--named - findMin(x=>a, z=>c, y=>b, m=>d);
--mixed - findMin(a,b,c, m=>d);  LEGAL
        --findMin(x=>a,b,c,d);   ILLEGAL
        


-- FUNCTIONS-------------------------------------------------------------------
--same as proc exc it returns a value

--create standalone
select * from customers;

CREATE OR REPLACE FUNCTION totalCustomers RETURN number IS 
total number(2) := 0;
BEGIN 
  SELECT count(*) into total 
  FROM customers; 
  RETURN total;
END;

-- call standalone function
DECLARE 
  c number(2); 
BEGIN 
  c := totalCustomers(); 
  dbms_output.put_line('Total no. of Customers: ' || c);
END;

--example
DECLARE 
a number;
b number;
c number;
FUNCTION findMax(x IN number, y IN number) 
RETURN number IS
z number;
BEGIN 
  IF x > y THEN 
    z:= x; 
  ELSE 
    Z:= y; 
  END IF; 
  RETURN z; 
END;

BEGIN
  a:= 23; 
  b:= 45; 
  c := findMax(a, b);
  dbms_output.put_line(' Maximum of (23,45): ' || c);
END;


--PL/SQL recursive functions
--factorial
Declare 
num number;
factorial number;

function fact(x number)
return number is f number;
begin
  if(x=0) then
    f:= 1;
  else
    f:= x* fact(x-1);
  end if;
  
  return f;
end;

begin
  num:=6;
  factorial := fact(num);
  dbms_output.put_line(' Factorial '||num||' is ' ||factorial);
end;





--CURSOR-----------------------------------------------------------------------
--prog updates table increase sal of each cust by 500 and use sql%rowcount to determine rows affected

--Implicit cursors, automatically defined by sql
DECLARE 
total_rows number(2);

BEGIN 
  UPDATE customers
  SET salary = salary + 500
--  where name='risjnj';  uncomment for no cust selected
  
  IF sql%notfound THEN 
    dbms_output.put_line('no customers selected'); 
  ELSIF sql%found THEN 
    total_rows := sql%rowcount; 
    dbms_output.put_line( total_rows || ' customers selected '); 
  END IF;
END;

--explicit cursors
--4steps - declare cursor for intializing in memory, 
        -- opening cursor for allocating memory
        -- fetching cursor for retrueving data
        -- closing cursor to release allocated memory
        
--declaring oepning fetching closing

CURSOR c_customers IS SELECT idno, name, address FROM customers;
OPEN c_customers;
FETCH c_customers INTO c_id, c_name, c_addr;
CLOSE c_customers;

--eg
DECLARE
c_id customers.idno%type;
c_name customers.name%type; 
c_addr customers.address%type; 

CURSOR c_customers is SELECT idno, name, address FROM customers; 
BEGIN
  OPEN c_customers;
  LOOP
    FETCH c_customers into c_id, c_name, c_addr; 
    dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr); 
    EXIT WHEN c_customers%notfound; 
  END LOOP; 
  CLOSE c_customers; 
END;




------------------------------------------------------------------------------------ 7/4/16
CURSOR c_customers IS SELECT idno, name, address FROM customers;


DECLARE 
  c_id customers.idno%type; 
  c_name customers.name%type; 
  c_addr customers.address%type;
  CURSOR c_customers is SELECT idno, name, address FROM customers; 
BEGIN 
  OPEN c_customers; 
  LOOP FETCH c_customers into c_id, c_name, c_addr; 
    dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr); 
    EXIT WHEN c_customers%notfound; 
  END LOOP; 
  CLOSE c_customers; 
END;

--RECORDS
--table based -  %rowtype

DECLARE 
  customer_rec customers%rowtype; 
BEGIN 
  SELECT * into customer_rec FROM customers WHERE idno = 5; 
  dbms_output.put_line('CustomerID:'||customer_rec.idno); 
  dbms_output.put_line('CustomerName:'||customer_rec.name); 
  dbms_output.put_line('CustomerAddress:'||customer_rec.address); 
  dbms_output.put_line('Customer Salary: ' || customer_rec.salary);
END;

--cursor based

declare
  cursor customer_cur is
    select idno, name, address from customers;
  customer_rec customer_cur%rowtype;
begin
  open customer_cur;
  loop
    fetch customer_cur into customer_rec;
    exit when customer_cur%notfound;
    dbms_output.put_line(customer_rec.idno || ' ' || customer_rec.name);
  end loop;
end;

--user defined records

--defining
DECLARE 
  TYPE books IS RECORD 
    ( title varchar(50), 
      author varchar(50), 
      subject varchar(100), 
      book_id number  ); 
  book1 books; 
  book2 books;
  
--access using '.' dot operator
--run including up
BEGIN
  --book1 specification
  book1.title := 'C Programming';
  book1.author := 'Nuha Ali';
  book1.subject := 'C programming tutorial';
  book1.book_id := 6495407;

  --book2 specification
  book2.title := 'Telecom Billing';
  book2.author := 'Zara Ali';
  book2.subject := 'Telecom billing tutorial';
  book2.book_id := 6495700;

  --print book1 record
  dbms_output.put_line('Book1 title : '|| book1.title);
  dbms_output.put_line('Book1 author : '|| book1.author);
  dbms_output.put_line('Book1 subject : '|| book1.subject);
  dbms_output.put_line('Book1 book_id: '|| book1.book_id);
  
  --print book2 record
  dbms_output.put_line('Book2 title : '|| book2.title);
  dbms_output.put_line('Book2 author : '|| book2.author);
  dbms_output.put_line('Book2 subject : '|| book2.subject);
  dbms_output.put_line('Book2 book_id : '|| book2.book_id);
end;

--Records as subprograms parameters
DECLARE 
  TYPE books IS RECORD 
    ( title varchar(50), 
      author varchar(50), 
      subject varchar(100), 
      book_id number  ); 
  book1 books; 
  book2 books;

procedure printbook (book books) is
begin
  dbms_output.put_line('Book1 title : '|| book1.title);
  dbms_output.put_line('Book1 author : '|| book1.author);
  dbms_output.put_line('Book1 subject : '|| book1.subject);
  dbms_output.put_line('Book1 book_id: '|| book1.book_id);
end;

BEGIN
  --book1 specification
  book1.title := 'C Programming';
  book1.author := 'Nuha Ali';
  book1.subject := 'C programming tutorial';
  book1.book_id := 6495407;

  --book2 specification
  book2.title := 'Telecom Billing';
  book2.author := 'Zara Ali';
  book2.subject := 'Telecom billing tutorial';
  book2.book_id := 6495700;
  
  --use procedure
  printbook(book1);
  printbook(book2);
end;
